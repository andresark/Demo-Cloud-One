# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'bc58a70b-4439-447e-8fb8-e28001510ce1'
  imageRepository: 'moneyx'
  containerRegistry: 'moneyx.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'latest'

  # Smartcheck connection build time variables
  dsscURL: 'container-security.tmselabs.com'
  dsscUser: 'felipe_costa'
  dsscPass: 'Trend@00p$'
  acrUser: 'moneyx'
  acrPass: 'cTGKRZ53GuSB6w+4wotJ15Wa8qPj1e3E'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: SAST
  displayName: Source Code Test
  jobs:
  - job: SAST
    displayName: Static Code Analysis
    steps:
    - script: | 
          echo "SonarQube execution for checkedout code"
          sleep 10
      displayName: "SonarQube Code Sanatization Check"
  - job: SCA
    displayName: Dependency Scan Check
    steps:
    - script: | 
          echo "Snyk Test"
    # - task: SnykSecurityScan@0
    #   inputs:
    #     serviceConnectionEndpoint: 'Snyk'
    #     testType: 'app'
    #     monitorOnBuild: true
    #     failOnIssues: false
    #     projectName: 'Cloud-One-DevSecOps'

#####################################################################

- stage: Container_Build
  displayName: Container Build
  jobs:
  - job: Build
    displayName: Container Build
    steps:
    - task: Docker@2
      displayName: Container Build
      inputs:
       command: build
       repository: $(imageRepository)
       dockerfile: $(dockerfilePath)
       containerRegistry: $(dockerRegistryServiceConnection)
       tags: |
          $(tag) 
    - task: Docker@2
      displayName: Container Push
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: 'push'
        tags: |
          $(tag)
    - script: | 
          docker images
          docker run -v /var/run/docker.sock:/var/run/docker.sock deepsecurity/smartcheck-scan-action --image-name moneyx.azurecr.io/$(imageRepository):$(tag) --smartcheck-host=$(dsscURL) --smartcheck-user=$(dsscUser) --smartcheck-password=$(dsscPass) --insecure-skip-tls-verify --insecure-skip-registry-tls-verify --image-pull-auth='{"username": "'"$(acrUser)"'", "password": "'"$(acrPass)"'"}' --findings-threshold '{"malware": 100, "vulnerabilities": { "defcon1": 100, "critical": 100, "high": 100 }, "contents": { "defcon1": 100, "critical": 1, "high": 100 }, "checklists": { "defcon1": 100, "critical": 100, "high": 100 }}'
      displayName: "Scanning Image for Security Risks" 
#####################################################################

- stage: Unit_Tests
  displayName: Unit Test
  jobs:  
  - job: Unit_Test
    displayName: Unit Test

#####################################################################

- stage: Deploy
  displayName: Deploy to AKS
  jobs:  
  - job: Deploy
    displayName: Deploy to AKS
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'prod-FelipeAKS-default-1586847895362'
        command: 'apply'
        useConfigurationFile: true
        configuration: 'deployment.yaml'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
        azureSubscriptionEndpointForSecrets: 'Microsoft Azure Enterprise (deaa6606-c28b-4f38-b380-3935beda9ac6)'
        azureContainerRegistry: 'moneyx.azurecr.io'
        secretName: 'my-secret'
