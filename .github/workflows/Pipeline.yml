#---------------------------------------------------------------------
# GitHub Actions to Protect CI/CD Pipelines
#
# Version      Date        Info
# 1.0          2020        Initial Version
#
# Made by Felipe Costa
#---------------------------------------------------------------------

name: Protect CI/CD Pipelines
env:
  AWS_REGION_NAME: "us-east-1"

on: 
  push:
    branches: 
      - master
  pull_request:
    branches:
      - master

jobs:
    Source_Code_Test:
       runs-on: ubuntu-latest
       steps:
         
         - name: Git Checkout
           uses: actions/checkout@v2
 
         - name: Run Snyk to check for vulnerabilities
           run: echo run Snyk to check for vulnerabilities
           #uses: snyk/actions/maven@master
           #env:
            #SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
           #with:
            #args: --severity-threshold=low
                
    Build_and_Push:
       runs-on: ubuntu-latest
       needs: [Source_Code_Test]
       steps:
         - name: Git Checkout
           uses: actions/checkout@v2
         
         - name: Container Build
           run : docker build -t web-app:latest .
            
         - name: Configure my AWS Credentils
           uses: aws-actions/configure-aws-credentials@v1
           with:
             aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
             aws-secret-access-key: ${{ secrets.AWS_SECRET }}
             aws-region           : ${{ env.AWS_REGION_NAME }}
         
         - name: Login to ECR
           run: $(aws ecr get-login --no-include-email --region ${{ env.AWS_REGION_NAME }})
         
         - name: Tag Docker Image
           run: docker tag web-app:latest ${{ secrets.ECR_LOGIN }}/web-app:latest
           
         - name: Push Docker Image to ECR
           run: docker push ${{ secrets.ECR_LOGIN }}/web-app:latest
           
    Container_Image_Scan:
       runs-on: ubuntu-latest
       needs: [Build_and_Push]
       steps:
         - name: Git Checkout
           uses: actions/checkout@v2
         
         - name: Cloud One Container Image Scan
           run: | 
              curl -sk -X POST https://'${{ secrets.DSSC_HOST }}'/api/sessions -H 'Content-type:application/json' -H 'X-Api-Version:2018-05-01' -d '{"user": {"userid":"'${{ secrets.DSSC_USER }}'","password":"'${{ secrets.DSSC_PSW }}'"}}'  > raw
              cat raw | jq .token  > token
              TEMP_TOKEN='cat token'
              sed -e 's/^"//' -e 's/"$//' <<< ${TEMP_TOKEN} > token
              TOKEN='cat token'
         - name: Cointainer Successfully Scanned
           run : echo "CI Pipeline part finished successfully"
    
    Dev_Tests:
       runs-on: ubuntu-latest
       needs: [Container_Image_Scan]
       steps:
         - name: Configure my AWS Credentils
           uses: aws-actions/configure-aws-credentials@v1
           with:
             aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
             aws-secret-access-key: ${{ secrets.AWS_SECRET }}
             aws-region           : ${{ env.AWS_REGION_NAME }}
         
         - name: Dev Tests
           run: echo Dev Tests
      
         - name: Unit Tests
           run: echo Unit Tests
           
         - name: Dev Tests part finished successfully
           run : echo "Dev Tests part finished successfully"
       
    Deploy:
       runs-on: ubuntu-latest
       needs: [Dev_Tests]
       steps:
         - name: Git Checkout
           uses: actions/checkout@v2
           
         - name: AWS CF Deploy Tests
           run: echo Template Validation #aws cloudformation validate-template --template-body file://cfn.yml
      
         - name: Conformity CF Deploy Tests
           run: echo Conformity CF Deploy Test
           
         - name: Deploy to Fargate
           run: echo Deploy to Fargate

    Slack_Notification:
       runs-on: ubuntu-latest
       needs: [Deploy]
       steps:
 
         - name: Slack Notification
           run: echo Slack Notification