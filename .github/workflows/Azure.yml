#---------------------------------------------------------------------
# GitHub Actions to Protect CI/CD Pipelines
#
# Version      Date        Info
# 1.0          2020        Initial Version
#
# Made by Felipe Costa
#---------------------------------------------------------------------

name: Azure-Pipeline

env:
  PACKAGES_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_API }}
  TREND_AP_KEY: ${{ secrets.TREND_AP_KEY }}
  TREND_AP_SECRET: ${{ secrets.TREND_AP_SECRET }}
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  DSSC_SMARTCHECK_HOST: ${{ secrets.DSSC_SMARTCHECK_HOST }}
  DSSC_SMARTCHECK_USER: ${{ secrets.DSSC_SMARTCHECK_USER }}
  DSSC_SMARTCHECK_PASSWORD: ${{ secrets.DSSC_SMARTCHECK_PASSWORD }}

on: 
  push:
    branches: 
      - master
      
jobs:
    Code_Scan:
       runs-on: ubuntu-latest
       steps:
         - name: Checkout repository
           uses: actions/checkout@v2
           with:
            fetch-depth: 2   
         - run: git checkout HEAD^2
           if: ${{ github.event_name == 'pull_request' }}
         - name: Initialize CodeQL
           uses: github/codeql-action/init@v1
         - name: Autobuild
           uses: github/codeql-action/autobuild@v1
         - name: Perform CodeQL Analysis
           uses: github/codeql-action/analyze@v1
    Dependency_Check:
       runs-on: ubuntu-latest
       steps:
         - uses: actions/checkout@v2
         - name: Snyk Scan
           run: echo "Snyk Scan"      
    Build_and_Push:
        runs-on: ubuntu-latest
        needs: [Dependency_Check]
        steps:
          - uses: actions/checkout@v2
          - name: Container Build
            run : |
              cd frontend && docker build -t moneyx-frontend:latest .
              cd ../backend && docker build -t moneyx-backend:latest .
          - name: Tag Docker Image
            run: |
              docker tag moneyx-frontend felipecosta09/moneyx-frontend:latest
              docker tag moneyx-backend felipecosta09/moneyx-backend:latest
          - name: Cloud One Container Sca  
            uses: azure/docker-login@v1
            with:
              login-server: 'registry.hub.docker.com' # default: index.docker.io
              username: '${{ secrets.DOCKERHUB_USER }}'
              password: '${{ secrets.DOCKERHUB_PASSWORD }}'
          - name: Push Docker Images to DockerHub
            run: |
              docker push felipecosta09/moneyx-frontend:latest
              docker push felipecosta09/moneyx-backend:latest
    Container_Scan:
       runs-on: ubuntu-latest
       needs: [Build_and_Push]
       steps:
         - name: Cloud One Container Scan DockerHub - Frontend
           uses: felipecosta09/Deep-Security-Smart-Check-Scan-Action@v1.0.2
           with:
              DSSC_IMAGE_NAME: felipecosta09/moneyx-frontend
              DSSC_SMARTCHECK_HOST: ${{ secrets.DSSC_SMARTCHECK_HOST }}
              DSSC_SMARTCHECK_USER: ${{ secrets.DSSC_SMARTCHECK_USER }}
              DSSC_SMARTCHECK_PASSWORD: ${{ secrets.DSSC_SMARTCHECK_PASSWORD }}
              DSSC_IMAGE_PULL_AUTH: '{"username": "${{ secrets.DOCKERHUB_USER }}","password": "${{ secrets.DOCKERHUB_PASSWORD }}"}'
              DSSC_FINDINGS_THRESHOLD: '{"malware": 999, "vulnerabilities": { "defcon1": 999, "critical": 999, "high": 999 }, "contents": { "defcon1": 999, "critical": 999, "high": 999 }, "checklists": { "defcon1": 999, "critical": 999, "high": 999 }}'
              DSSC_INSECURE_SKIP_TLS_VERIFY: true
              DSSC_INSECURE_SKIP_REGISTRY_TLS_VERIFY: true
         - name: Cloud One Container Scan DockerHub - Backend
           uses: felipecosta09/Deep-Security-Smart-Check-Scan-Action@v1.0.2
           with:
              DSSC_IMAGE_NAME: felipecosta09/moneyx-backend
              DSSC_SMARTCHECK_HOST: ${{ secrets.DSSC_SMARTCHECK_HOST }}
              DSSC_SMARTCHECK_USER: ${{ secrets.DSSC_SMARTCHECK_USER }}
              DSSC_SMARTCHECK_PASSWORD: ${{ secrets.DSSC_SMARTCHECK_PASSWORD }}
              DSSC_IMAGE_PULL_AUTH: '{"username": "${{ secrets.DOCKERHUB_USER }}","password": "${{ secrets.DOCKERHUB_PASSWORD }}"}'
              DSSC_FINDINGS_THRESHOLD: '{"malware": 999, "vulnerabilities": { "defcon1": 999, "critical": 999, "high": 999 }, "contents": { "defcon1": 999, "critical": 999, "high": 999 }, "checklists": { "defcon1": 999, "critical": 999, "high": 999 }}'
              DSSC_INSECURE_SKIP_TLS_VERIFY: true
              DSSC_INSECURE_SKIP_REGISTRY_TLS_VERIFY: true
         - name: Cointainer Successfully Scanned
           run : echo "CI Pipeline part finished successfully"
    Dev_Tests:
        runs-on: ubuntu-latest
        needs: [Container_Scan]
        steps:
         - name: Dev Tests
           run: echo Dev Tests
      
         - name: Unit Tests
           run: echo Unit Tests
           
         - name: Dev Tests part finished successfully
           run : echo "Dev Tests part finished successfully"
    Deploy:
        runs-on: ubuntu-latest
        needs: [Dev_Tests]
        steps:
         - name: 'Login via Azure CLI'
           run: echo "Deploy to Azure"
         
